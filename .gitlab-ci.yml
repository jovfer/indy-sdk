---
stages:
  - dockerbuild-pre
  - dockerbuild
  - build-pre
  - build
  - test
  - package
  - publish

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - cache/

variables:
  staticLibVersion: "20190607"
  rustVersion: "1.45.0"
  libsovtokenVersion: "1.0.5"
  libsovtokenVersionExtra: "15"
  indyBranch: 'rc' # RPM stream
  indySimpleVersion: "1.16.0" # RPM package name
  indyFullVersion: "1.16.0-170" # RPM directory
  indyFullDebVersion: "1.16.0~170" # DEB package name
  androidSovtokenArtifact: "libsovtoken_1.0.5-201912281255-e39929e_all.zip"
  iosSovtokenArtifact: "libsovtoken_1.0.5-201912281252-e39929e_all.zip"

## - Anchors - ##
.tags_micro:
  tags:
    - docker-machine
    - micro

.tags_large:
  tags:
    - docker-machine
    - large

.kaniko_large:
  extends: .kaniko_micro
  tags:
    - docker-machine
    - large

.kaniko_micro:
  extends: .tags_micro
  image:
    name: gcr.io/kaniko-project/executor:debug-v0.16.0
    entrypoint: [""]
  script:
    - if [ "$CI_COMMIT_REF_SLUG" == 'master' ] || [ "$CI_COMMIT_REF_SLUG" == 'stable' ]; then KANIKO_ARGS="--destination $CI_REGISTRY_IMAGE/${DOCKER_IMAGE_NAME}:latest $KANIKO_ARGS"; fi
    - echo "${KANIKO_ARGS}"
    - |
        echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" \
        > /kaniko/.docker/config.json
    - |
        echo "-----BEGIN CERTIFICATE-----
        MIIFJTCCAw2gAwIBAgIUMI0Z8YSLeRq8pZks40O3Dq2m8TIwDQYJKoZIhvcNAQEL
        BQAwGjEYMBYGA1UEAxMPRXZlcm55bSBSb290IENBMB4XDTE3MTAxMTIwMTAxMFoX
        DTQ3MTAwNDIwMTAzOVowGjEYMBYGA1UEAxMPRXZlcm55bSBSb290IENBMIICIjAN
        BgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA1kjmtmMfLJfsqUNaco44N3brW8Vu
        b02lAeEwbxc65mwfAG8kAjW7kYhI/fDXFOYXUvoa3Dg7bFeEatdIjHOahZssGM27
        HsQZ4PfRhPE6HtXFszmDwXWuEekVxoyueTqL7ExnNZ+BRTXvPfm5nw1E7L3o3xHF
        GSOtWFCyHfKd1LwMKzAVSjxlawEZnfk3WK3NxrC4UYMlQaDme7m3rCMfO+KBQk69
        bFXsgn6/EihVeQ8T1+T8gogofzh5b4Z7kS6e6GMqotbGFg4agejkRVsIglSpaQLk
        2Ztn/MP1dwgyvO4uvplB4sxZSC2FhhovlwPETmbKsnpj020+m0+YU4FPKwjroMiH
        tP//YqiNKsLxtjhffW7XFToyy0qQttW5RMWnyx4MXs9Hwcy29gY1izeGMSzz3zV5
        HG8JSJikuYbYiGJRVS0egovkVjja6lrVk0Q4Hm5pbw4l7LYCd6bkDLMsRaS1QnWs
        9iz6XEf5SpIu1FuqHmlhj1ABehUyGIg5oC6egML3q78yk0mCW523qMFa9Kjnk871
        mmXSCn3p/3DCrwWYfpcibxtVaKyJj6ISYIcl+Zu65Uzmhf+nj56x3gkNgEOva7JS
        Xge+FxPxsaXBGyeSH09nNIoNmh/UucuzpNY2UyCpJuqXHtR5jaACSdsqNxG8tcDg
        K9v98D/DFiShghECAwEAAaNjMGEwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQF
        MAMBAf8wHQYDVR0OBBYEFOrH4oUpB94gNDNqdGG92kdVZ3qkMB8GA1UdIwQYMBaA
        FOrH4oUpB94gNDNqdGG92kdVZ3qkMA0GCSqGSIb3DQEBCwUAA4ICAQCwjN3ggZ98
        BXT39fKkCX3FHb0++aFcIyMKWrcZIpYrl3GoZsNKZK4QNQ+uJOP8xmqgyrCoMfch
        VIGPQ0RDN/IzqCLhc/U3pDmk2hXa3xTxD3gpCQZ6Bz04KlcLfZd5jzbI741bVDyF
        a1n46bEyuqV4SsNJWI/FGokJCNcZH66njBQBaQAccZ7xB9vWU9yjIYtGQDDvSm6J
        SC2knrQri0vv4QLUSc1LS6AlWWSQxcCpcdO+OzIFGsf5bVmYN6J4R3COY5NyQ+yn
        pOSN2NOh5h3ZrYAxm3i4Il0orVLveVcTVDGeAgZUII4YLJi/01RHGqit3aCuApSh
        bzFTZ5FldFss+JX9iAhqpFDbHLgae0F3QmYEnGilt/PzO4j23QJo3FZKeruQLH7P
        L9aOgN6S2+Akbbm9YTc59yzU5TZMxANwTdaYFWFqk/8nKgZiBR1l8jnWTlWnm86A
        qVssH3DLKwiYrWSOHRzGuN5BmPXxxtKQJlwAXt0wJE3puUkaJSRo7CJQ3QNMoKDe
        OjzXc9WvkFIXr3Eui8UTiHB/WT7N4o8hmVN404akGfWE0YNwRVfWpjGdew6g0tZi
        lFnjUUk49av67um43JHcinT5NFPuleZzkjaL/D8ueOrjXQDy05rwVdgmw9pXog4B
        Tw6APXtEnjfD2H8HOpOX/7ef4gWK0O1Q7A==
        -----END CERTIFICATE-----" >> /kaniko/ssl/certs/ca-certificates.crt
    - |
        /kaniko/executor ${KANIKO_ARGS} --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/${DOCKERFILE_PATH} \
        --destination $CI_REGISTRY_IMAGE/${DOCKER_IMAGE_NAME}:${CI_COMMIT_REF_SLUG}


## - Jobs : dockerbuild-pre - ##
.dockerbuild-libindy:
  extends: .kaniko_large
  variables:
    KANIKO_ARGS: "--build-arg RUST_VER=${rustVersion} --build-arg LIBINDY_VER=${indyFullDebVersion} --build-arg LIBNULL_VER=${indyFullDebVersion} --build-arg LIBSOVTOKEN_VER=${libsovtokenVersion}"
  only:
    refs:
      - async@dev/vcx/indy-sdk
      - /^docker-.*/

dockerbuild-libindy-ubuntu16:
  stage: dockerbuild-pre
  extends: .dockerbuild-libindy
  variables:
    DOCKERFILE_PATH: libindy/ci/ubuntu.dockerfile
    DOCKER_IMAGE_NAME: libindy-ubuntu16
  only:
    changes:
      - .gitlab-ci.yml
      - libindy/ci/ubuntu.dockerfile


## - Jobs : Build - ##
build-consistent-vers-ts:
  extends: .tags_micro
  image: ${CI_REGISTRY_IMAGE}/vcx-libindy-ubuntu18
  stage: build-pre
  artifacts:
    expire_in: 1 week
    expose_as: 'build_ts'
    paths:
      - output/build_ts
  script:
    - touch output/build_ts
    - cd vcx/libvcx && ./../ci/scripts/cargo-update-version

.build-libindy:
  extends: .tags_large
  stage: build
  artifacts:
    expire_in: 1 week
    paths:
      - libindy/target/${BUILD_TYPE}/libindy.so
      - libnullpay/target/${BUILD_TYPE}/libnullpay.so
  services:
    - name: gitlab.corp.evernym.com:4567/dev/containers/indy-pool:1.12.3_1.0.8
      alias: pool_network
  timeout: 2h
  script:
    - export TEST_POOL_IP=$(getent ahostsv4 pool_network | grep STREAM | head -n 1 | awk '{ print $1 }')
    # - libindy/ci/scripts/lint.sh
    - libindy/ci/scripts/build.sh ${BUILD_TYPE}
    - libindy/ci/scripts/test.sh ${BUILD_TYPE} ${TEST_POOL_IP}
    # - libnullpay/ci/scripts/build.sh ${BUILD_TYPE}
    # - libnullpay/ci/scripts/test.sh ${BUILD_TYPE} ${TEST_POOL_IP}

build-libindy-ubuntu16-from-branch:
  extends: .build-libindy
  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu16:${CI_COMMIT_REF_SLUG}
  variables:
    PACKAGE_TYPE: 'xenial'
    BUILD_TYPE: 'debug'
  only:
    refs:
      - /^docker-.*/

build-libindy-ubuntu16-from-latest:
  extends: .build-libindy
  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu16:latest
  variables:
    PACKAGE_TYPE: 'xenial'
    BUILD_TYPE: 'debug'
  except:
    refs:
      - /^docker-.*/
      - async@dev/vcx/indy-sdk

build-libindy-ubuntu16-release:
  extends: .build-libindy
  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu16:latest
  variables:
    PACKAGE_TYPE: 'xenial'
    BUILD_TYPE: 'release'
  only:
    refs:
      - async@dev/vcx/indy-sdk


## - Jobs : Test - ##
#.test-libindy-java-wrapper:
#  extends: .tags_micro
#  stage: test
#  services:
#    - name: gitlab.corp.evernym.com:4567/dev/containers/indy-pool:1.9.2_1.0.2
#      alias: pool_network
#  script:
#    - export TEST_POOL_IP=$(getent ahostsv4 pool_network | grep STREAM | head -n 1 | awk '{ print $1 }')
#    - cp libindy/target/${BUILD_TYPE}/libindy.so wrappers/java/lib
#    - cp libnullpay/target/${BUILD_TYPE}/libnullpay.so wrappers/java/lib
#    - pushd wrappers/java
#    - RUST_LOG=indy::=debug mvn clean test
#    - popd
#test-libindy-java-wrapper-from-branch:
#  extends: .test-libindy-java-wrapper
#  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu16:${CI_COMMIT_REF_SLUG}
#  dependencies:
#    - build-libindy-ubuntu16-from-branch
#  variables:
#    PACKAGE_TYPE: 'xenial'
#    BUILD_TYPE: 'debug'
#  only:
#    refs:
#      - /^docker-.*/
#test-libindy-java-wrapper-from-latest:
#  extends: .test-libindy-java-wrapper
#  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu16:latest
#  dependencies:
#    - build-libindy-ubuntu16-from-latest
#  variables:
#    PACKAGE_TYPE: 'xenial'
#    BUILD_TYPE: 'debug'
#  except:
#    refs:
#      - /^docker-.*/
#      - async@dev/vcx/indy-sdk
#      - master@dev/vcx/indy-sdk
#      - stable@dev/vcx/indy-sdk
#test-libindy-java-wrapper-release:
#  extends: .test-libindy-java-wrapper
#  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu16:latest
#  dependencies:
#    - build-libindy-ubuntu16-from-latest
#  variables:
#    PACKAGE_TYPE: 'xenial'
#    BUILD_TYPE: 'release'
#  only:
#    refs:
#      - async@dev/vcx/indy-sdk


## - Jobs : Package - ##
package-libindy:
  extends: .tags_micro
  stage: package
  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu16:latest
  dependencies:
    - build-libindy-ubuntu16-release
  artifacts:
    expire_in: 1 week
    paths:
      - libindy/target/debian/*.deb
      - libnullpay/target/debian/*.deb
  variables:
    PACKAGE_TYPE: 'xenial'
  only:
    refs:
      - async@dev/vcx/indy-sdk
  script:
    - libindy/ci/scripts/package.sh

#.package-java-wrapper:
#  extends: .tags_micro
#  artifacts:
#    expire_in: 1 week
#    paths:
#      - vcx/wrappers/java/artifacts/
#  script:
#    - sudo dpkg -i ${CI_PROJECT_DIR}/output/libvcx*bionic*.deb
#    - cd vcx/libvcx && ./../ci/scripts/cargo-update-version
#    - cd -
#    - vcx/wrappers/java/ci/buildJar.sh $(python3 vcx/ci/scripts/toml_utils.py vcx/libvcx/Cargo.toml)
#package-java-wrapper-from-branch:
#  extends: .package-java-wrapper
#  stage: package
#  image: ${CI_REGISTRY_IMAGE}/vcx-java:${CI_COMMIT_REF_SLUG}
#  dependencies:
#    - build-libvcx-ubuntu18-from-branch
#  only:
#    refs:
#      - /^docker-.*/
#package-java-wrapper-from-latest:
#  extends: .package-java-wrapper
#  stage: package
#  image: ${CI_REGISTRY_IMAGE}/vcx-java:latest
#  dependencies:
#    - build-libvcx-ubuntu18-from-latest
#  except:
#    refs:
#      - /^docker-.*/


## - Jobs : Publish - ##
#publish-java-wrapper:
#  stage: publish
#  image: ${CI_REGISTRY_IMAGE}/vcx-java:latest
#  extends: .tags_micro
#  only:
#    refs:
#      - async@dev/vcx/indy-sdk
#  script:
#    - cp ${CLOUDREPO_SETTINGS_XML} ./settings.xml
#    - sudo chmod +x vcx/wrappers/java/ci/publishJar.sh
#    - vcx/wrappers/java/ci/publishJar.sh

publish-libindy:
  extends: .tags_micro
  stage: publish
  image: ${CI_REGISTRY_IMAGE}/vcx-libindy-ubuntu18:latest
  dependencies:
    - package-libindy
  only:
    refs:
      - async@dev/vcx/indy-sdk
  script:
    - cp libindy/target/debian/*.deb ${CI_PROJECT_DIR}/output
    - ls -al ${CI_PROJECT_DIR}/output
    - export KRAKEN_CREDENTIALS=${KRK_USERNAME}:${KRK_PASSWORD}
#    - vcx/ci/scripts/publish.sh "${KRAKEN_CREDENTIALS}" libindy*xenial*.deb https://kraken.corp.evernym.com/repo/portal_dev/upload
#    - vcx/ci/scripts/publish.sh "${KRAKEN_CREDENTIALS}" libindy*xenial*.deb https://kraken.corp.evernym.com/repo/agency_dev/upload
